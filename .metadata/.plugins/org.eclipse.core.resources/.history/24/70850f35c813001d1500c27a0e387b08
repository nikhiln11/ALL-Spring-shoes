package com.dbssecurity.ford.configuration;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
	@EnableWebSecurity
	public class SecConfig extends WebSecurityConfigurerAdapter{
	    
	    
	    @Override
	    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
	        
	        auth.inMemoryAuthentication()
	        .withUser("hari")
	        .password("7878")
	        .roles("DBSADMIN")
	        .and()
	        .withUser("prem")
	        .password("8888")
	        .roles("USER");
	        
	    }
	    
	    @Override
	    protected void configure(HttpSecurity http) throws Exception {
	        
	        
	        http.httpBasic()
	        .and()
	        .authorizeRequests()
	        .antMatchers("/admin").hasRole("DBSADMIN")
	        .antMatchers("/user").hasAnyRole("DBSADMIN","USER")
	        .antMatchers("/home").permitAll()
	        .antMatchers("/register").permitAll()
	        .and()
	        .headers().frameOptions().disable()
	        .and()
	        .cors().disable()
	        .formLogin();
	        
	    }
	    
	    
	    @Bean
	    public PasswordEncoder getPasswordEncoder() {
	        return NoOpPasswordEncoder.getInstance();
	    }

	}
